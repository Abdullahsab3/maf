;; Example taken from Dynamic Partial Order Reduction, Figure 7
(let* ((numblocks 26)
       (numinode 32)
       (locki (vector numinode #t))
       (inode (vector numinode 0))
       (lockb (vector numblocks #t))
       (busy (vector numblocks #f))
       (thread (lambda (tid)
                 (let ((i (modulo tid numinode))
                       (process (lambda (b)
                                  (acquire (vector-ref lockb b))
                                  (if (not (vector-ref busy b))
                                    (begin
                                      (vector-set busy b #t)
                                      (vector-set inode i (+ b 1))
                                      (release (vector-ref lockb b)))
                                   (begin
                                     (release (vector-ref lockb b))
                                     (process (modulo (+ b 1) numblocks))))))
                   (acquire (vector-ref lock i))
                   (if (= (vector-ref inode i) 0)
                     (process (modulo (* i 2) numblocks)))
                   (release (vector-ref lock i)))))
      (t1 (thread 1))
      (t2 (thread 2)))
  (join t1)
  (join t2))
