;; Example taken from Dynamic Partial Order Reduction, Figure 7
(letrec ((make-initialized-vector (lambda (n f)
                                    (letrec ((v (make-vector n (bottom)))
                                             (loop (lambda (i)
                                                     (if (= i n)
                                                         v
                                                         (begin
                                                           (vector-set! v i (f i))
                                                           (loop (+ i 1)))))))
                                      (loop 0)))))
  (let* ((numblocks 26)
         (numinode 32)
         (locki (make-initialized-vector numinode (lambda (x) (lock))))
         (inode (make-vector numinode 0))
         (lockb (make-initialized-vector numblocks (lambda (x) (lock))))
         (busy (make-vector numblocks #f))
         (thread (lambda (tid)
                   (letrec ((i (modulo tid numinode))
                            (process (lambda (b)
                                       (acquire (vector-ref lockb b))
                                       (if (not (vector-ref busy b))
                                           (begin
                                             (vector-set! busy b #t)
                                             (vector-set! inode i (+ b 1))
                                             (release (vector-ref lockb b)))
                                           (begin
                                             (release (vector-ref lockb b))
                                             (process (modulo (+ b 1) numblocks)))))))
                     (acquire (vector-ref locki i))
                     (if (= (vector-ref inode i) 0)
                         (process (modulo (* i 2) numblocks)))
                     (release (vector-ref locki i))))))
    (thread 1)))
