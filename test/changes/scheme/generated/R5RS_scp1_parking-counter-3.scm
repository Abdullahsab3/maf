; Changes:
; * removed: 0
; * added: 3
; * swaps: 0
; * negated predicates: 3
(letrec ((create-counter (lambda (initial)
                           (letrec ((increase (lambda ()
                                                (set! initial (+ initial 1))))
                                    (decrease (lambda ()
                                                (set! initial (- initial 1))))
                                    (read (lambda ()
                                            initial))
                                    (dispatch (lambda (m)
                                                (if (eq? m 'increase)
                                                   (increase)
                                                   (if (<change> (eq? m 'decrease) (not (eq? m 'decrease)))
                                                      (decrease)
                                                      (if (<change> (eq? m 'read) (not (eq? m 'read)))
                                                         (read)
                                                         (display "wrong message")))))))
                              dispatch)))
         (create-parking (lambda capaciteiten
                           (let ((verdieping-ctrs (map create-counter capaciteiten))
                                 (nr-verdiepingen (length capaciteiten))
                                 (nbr-cars 0))
                              (letrec ((total-capacity (lambda ()
                                                         (apply + capaciteiten)))
                                       (full? (lambda ()
                                                (= nbr-cars (total-capacity))))
                                       (empty? (lambda ()
                                                 (= nbr-cars 0)))
                                       (max-reached-level (lambda (level idx)
                                                            (<change>
                                                               ()
                                                               idx)
                                                            (>= (level 'read) (list-ref capaciteiten (- idx 1)))))
                                       (level-current (lambda ()
                                                        (letrec ((loop (lambda (lst index)
                                                                         (if (null? lst)
                                                                            #f
                                                                            (let* ((level (car lst))
                                                                                   (capacity (level 'read)))
                                                                               (<change>
                                                                                  ()
                                                                                  lst)
                                                                               (if (> capacity 0)
                                                                                  index
                                                                                  (loop (cdr lst) (+ index 1))))))))
                                                           (loop verdieping-ctrs 1))))
                                       (level-to-leave (lambda ()
                                                         (letrec ((loop (lambda (lst index)
                                                                          (if (null? lst)
                                                                             #f
                                                                             (let* ((level (car lst))
                                                                                    (capacity (level 'read)))
                                                                                (if (if (not (max-reached-level level index)) (>= capacity 0) #f)
                                                                                   index
                                                                                   (loop (cdr lst) (- index 1))))))))
                                                            (loop (reverse verdieping-ctrs) nr-verdiepingen))))
                                       (car-enters (lambda ()
                                                     (let ((level (level-current)))
                                                        (if level
                                                           (let ((verdieping-ctr (list-ref verdieping-ctrs (- level 1))))
                                                              (set! nbr-cars (+ nbr-cars 1))
                                                              (verdieping-ctr 'decrease))
                                                           #f))))
                                       (car-leaves (lambda ()
                                                     (let ((level (level-to-leave)))
                                                        (if level
                                                           (let ((verdieping-ctr (list-ref verdieping-ctrs (- level 1))))
                                                              (set! nbr-cars (- nbr-cars 1))
                                                              (verdieping-ctr 'increase))
                                                           (let ((verdieping-ctr (list-ref verdieping-ctrs (- nr-verdiepingen 1))))
                                                              (set! nbr-cars (- nbr-cars 1))
                                                              (verdieping-ctr 'increase))))))
                                       (dispatch (lambda (msg)
                                                   (if (eq? msg 'full?)
                                                      (full?)
                                                      (if (eq? msg 'empty?)
                                                         (empty?)
                                                         (if (eq? msg 'level)
                                                            (level-current)
                                                            (if (eq? msg 'car-enters)
                                                               (car-enters)
                                                               (if (eq? msg 'lst)
                                                                  verdieping-ctrs
                                                                  (if (<change> (eq? msg 'car-leaves) (not (eq? msg 'car-leaves)))
                                                                     (car-leaves)
                                                                     (error "wrong message"))))))))))
                                 dispatch))))
         (parking (create-parking 3 5 2)))
   (if (= (parking 'level) 1)
      (if (not (parking 'full?))
         (if (= (begin (parking 'car-enters) (parking 'car-enters) (parking 'car-enters) (parking 'car-enters) (<change> () (display parking)) (parking 'level)) 2)
            (if (not (parking 'empty?))
               (if (begin (parking 'car-enters) (parking 'car-enters) (parking 'car-enters) (parking 'car-enters) (parking 'car-enters) (parking 'car-enters) (parking 'full?))
                  (if (not (parking 'car-enters))
                     (= (begin (parking 'car-leaves) (parking 'car-leaves) (parking 'car-leaves) (parking 'level)) 2)
                     #f)
                  #f)
               #f)
            #f)
         #f)
      #f))