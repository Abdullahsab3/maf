; Changes:
; * removed: 2
; * added: 11
; * swaps: 5
; * negated predicates: 1
(letrec ((BIAS 1000)
         (NMBR-prefix 1)
         (PAIR-prefix 2)
         (NULL-prefix 3)
         (MASK-prefix 4)
         (NMBR (* NMBR-prefix BIAS))
         (PAIR (* PAIR-prefix BIAS))
         (NULL (* NULL-prefix BIAS))
         (MASK (* MASK-prefix BIAS))
         (PREFIX (lambda (val)
                   (<change>
                      ()
                      (display BIAS))
                   (quotient (abs val) BIAS)))
         (VALUE (lambda (val)
                  (remainder (abs val) BIAS)))
         (MAKE (lambda (prefix val)
                 (+ prefix val)))
         (FREE 0)
         (SIZE 16)
         (THE-CARS (make-vector SIZE NULL))
         (THE-CDRS (make-vector SIZE NULL))
         (car (lambda (cons-val)
                (if (<change> (pair? cons-val) (not (pair? cons-val)))
                   (vector-ref THE-CARS (VALUE cons-val))
                   (error "pair expected"))))
         (cdr (lambda (cons-val)
                (if (pair? cons-val)
                   (vector-ref THE-CDRS (VALUE cons-val))
                   (error "pair expected"))))
         (set-car! (lambda (cons-val car-val)
                     (if (pair? cons-val)
                        (vector-set! THE-CARS (VALUE cons-val) car-val)
                        (error "pair expected"))))
         (set-cdr! (lambda (cons-val cdr-val)
                     (if (pair? cons-val)
                        (vector-set! THE-CDRS (VALUE cons-val) cdr-val)
                        (error "pair expected"))))
         (number? (lambda (val)
                    (eq? (PREFIX val) NMBR-prefix)))
         (pair? (lambda (val)
                  (eq? (PREFIX val) PAIR-prefix)))
         (null? (lambda (val)
                  (eq? (PREFIX val) NULL-prefix)))
         (MASK? (lambda (val)
                  (eq? (PREFIX val) MASK-prefix)))
         (cons (lambda (car-val cdr-val)
                 (if (= FREE SIZE) (RECLAIM) #f)
                 (let ((hold FREE))
                    (<change>
                       ()
                       (vector-set! THE-CDRS hold cdr-val))
                    (set! FREE (+ FREE 1))
                    (<change>
                       ()
                       (vector-set! THE-CARS hold car-val))
                    (<change>
                       ()
                       vector-set!)
                    (<change>
                       (vector-set! THE-CARS hold car-val)
                       ())
                    (<change>
                       (vector-set! THE-CDRS hold cdr-val)
                       (MAKE PAIR hold))
                    (<change>
                       (MAKE PAIR hold)
                       (vector-set! THE-CDRS hold cdr-val)))))
         (ROOT NULL)
         (NEW-CARS (make-vector SIZE NULL))
         (NEW-CDRS (make-vector SIZE NULL))
         (RECLAIM (lambda ()
                    (letrec ((relocate-old-result-in-new (lambda (val)
                                                           (if (pair? val)
                                                              (let* ((old (VALUE val))
                                                                     (old-car (vector-ref THE-CARS old))
                                                                     (old-cdr (vector-ref THE-CDRS old)))
                                                                 (if (MASK? old-car)
                                                                    old-cdr
                                                                    (let* ((new FREE)
                                                                           (pair (MAKE PAIR new)))
                                                                       (<change>
                                                                          ()
                                                                          THE-CARS)
                                                                       (set! FREE (+ FREE 1))
                                                                       (vector-set! NEW-CARS new old-car)
                                                                       (<change>
                                                                          (vector-set! NEW-CDRS new old-cdr)
                                                                          (vector-set! THE-CARS old MASK))
                                                                       (<change>
                                                                          (vector-set! THE-CARS old MASK)
                                                                          (vector-set! NEW-CDRS new old-cdr))
                                                                       (vector-set! THE-CDRS old pair)
                                                                       pair)))
                                                              val)))
                             (gc-flip (lambda ()
                                        (let ((temp THE-CDRS))
                                           (set! THE-CDRS NEW-CDRS)
                                           (<change>
                                              ()
                                              THE-CDRS)
                                           (<change>
                                              ()
                                              (display temp))
                                           (set! NEW-CDRS temp))
                                        (let ((temp THE-CARS))
                                           (set! THE-CARS NEW-CARS)
                                           (set! NEW-CARS temp))))
                             (gc-loop (lambda (scan)
                                        (if (= scan FREE)
                                           (gc-flip)
                                           (let ((old-car (vector-ref NEW-CARS scan))
                                                 (old-cdr (vector-ref NEW-CDRS scan)))
                                              (vector-set! NEW-CARS scan (relocate-old-result-in-new old-car))
                                              (<change>
                                                 ()
                                                 relocate-old-result-in-new)
                                              (vector-set! NEW-CDRS scan (relocate-old-result-in-new old-cdr))
                                              (gc-loop (+ scan 1)))))))
                       (set! FREE 0)
                       (set! ROOT (relocate-old-result-in-new ROOT))
                       (gc-loop 0))))
         (_ (lambda (val)
              (MAKE NMBR val)))
         (_11 (_ 11))
         (_12 (_ 12))
         (_13 (_ 13))
         (_14 (_ 14))
         (_15 (_ 15))
         (_21 (_ 21))
         (_22 (_ 22))
         (_31 (_ 31))
         (_32 (_ 32))
         (_33 (_ 33))
         (_34 (_ 34))
         (_35 (_ 35))
         (_36 (_ 36))
         (_41 (_ 41))
         (_42 (_ 42))
         (_43 (_ 43))
         (_51 (_ 51))
         (_52 (_ 52))
         (_61 (_ 61))
         (_62 (_ 62))
         (show (lambda ()
                 (display "cars > ")
                 (display THE-CARS)
                 (<change>
                    (newline)
                    (display "cdrs > "))
                 (<change>
                    (display "cdrs > ")
                    (newline))
                 (display THE-CDRS)
                 (<change>
                    (newline)
                    ())
                 (display "ROOT > ")
                 (display ROOT)
                 (display "  FREE > ")
                 (<change>
                    (display FREE)
                    (newline))
                 (<change>
                    (newline)
                    (display FREE)))))
   (<change>
      (set! ROOT (cons (cons (cons _11 _12) (cons _13 (cons _14 _15))) ROOT))
      (cons _21 _22))
   (<change>
      (cons _21 _22)
      (set! ROOT (cons (cons (cons _11 _12) (cons _13 (cons _14 _15))) ROOT)))
   (set! ROOT (cons (cons _31 (cons (cons _32 _33) (cons _34 (cons _35 _36)))) ROOT))
   (set-cdr! (cdr (car ROOT)) ROOT)
   (<change>
      ()
      (display _61))
   (cons _41 (cons _42 _43))
   (<change>
      ()
      car)
   (set! ROOT (cons (cons _51 _52) ROOT))
   (set-car! (car ROOT) (cdr (car (cdr ROOT))))
   (show)
   (<change>
      ()
      (cons _14 _15))
   (cons _61 _62)
   (show))