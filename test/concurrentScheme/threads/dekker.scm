(define wants-to-enter-0 (t/ref #f))
(define wants-to-enter-1 (t/ref #f))
(define turn (t/ref 0))
(define counter (t/ref 0))

(define (p0)
  (t/ref-set wants-to-enter-0 #t)
  (letrec ((wait (lambda ()
                   (if (t/deref wants-to-enter-1)
                       (if (not (= (t/deref turn) 0))
                           (letrec ((wait2 (lambda ()
                                             (if (not (= (t/deref turn) 0))
                                                 (wait2)
                                                 #t))))
                             (t/ref-set wants-to-enter-0 #f)
                             (wait2)
                             (t/ref-set wants-to-enter-0 #t)
                             (wait))
                           (wait))
                       #t))))
    (wait)
    ;; Critical section
    (t/ref-set counter (+ (t/deref counter) 1))
    (t/ref-set turn 1)
    (t/ref-set wants-to-enter-0 #f)))

(define (p1)
  (t/ref-set wants-to-enter-1 #t)
  (letrec ((wait (lambda ()
                   (if (t/deref wants-to-enter-0)
                       (if (not (= (t/deref turn) 1))
                           (letrec ((wait2 (lambda ()
                                             (if (not (= (t/deref turn) 1))
                                                 (wait2)
                                                 #t))))
                             (t/ref-set wants-to-enter-1 #f)
                             (wait2)
                             (t/ref-set wants-to-enter-1 #t)
                             (wait))
                           (wait))
                       #t))))
    (wait)
    ;; Critical section
    (t/ref-set counter (+ (t/deref counter) 1))
    (t/ref-set turn 0)
    (t/ref-set wants-to-enter-1 #f)))

;; Creates the two threads, which each increase counter
(define t0 (fork (p0)))
(define t1 (fork (p1)))
(join t0)
(join t1)
(= (t/deref counter) 2)
