Scala-AM: A Framework for Static Analysis of Dynamic Languages
* Goal
The goal of this artefact is to experiment with abstract machines and language
semantics.
* Usage
** Running the test suite
#+BEGIN_SRC shell
$ sbt
> project scalaam
> test
#+END_SRC
The test suite of Scala-AM can be run using =sbt test=.

** Running a program in command line
#+BEGIN_SRC shell
$ sbt
> project scalaam
> runMain scalaam.cli.RunConcrete test/church.scm # run church.scm in concrete (<1s)
> runMain scalaam.cli.SchemeRunAAM test/church.scm # run it with AAM
> runMain scalaam.cli.SchemeRunGAAM test/church.scm # run it with AAM and a
global store
#+END_SRC

* References and Relevant publications
The idea behind Scala-AM comes from the [[http://matt.might.net/papers/vanhorn2010abstract.pdf][Abstracting Abstract Machines]]
litterature and has integrated the work of [[https://doi.org/10.1007/978-3-030-11245-5_12][Effect-Driven Flow Analysis]].

The Scala-AM framework is described in the following publication:
  - Scala-AM: A Modular Static Analysis Framework. SCAM 2016. [[http://soft.vub.ac.be/Publications/2016/vub-soft-tr-16-07.pdf][pdf]], [[https://zenodo.org/badge/latestdoi/23603/acieroid/scala-am][doi]].
  - Building a Modular Static Analysis Framework in Scala. Scala@SPLASH 2016. [[http://soft.vub.ac.be/Publications/2016/vub-soft-tr-16-13.pdf][pdf]], [[http://doi.acm.org/10.1145/2998392.3001579][doi]].

Scala-AM has been used for evaluating static analysis approaches in the
following publications:
  - Garbage-Free Abstract Interpretation through Abstract Reference
    Counting. ECOOP 2019. [[http://drops.dagstuhl.de/opus/volltexte/2019/10784/][pdf]].
  - A general method for rendering static analyses for diverse concurrency
    models modular. Journal of Systems and Software, Volume 149. 2019. [[https://soft.vub.ac.be/~qstieven/fwo-proposal-jss.pdf][pdf]], [[https://doi.org/10.1016/j.jss.2018.10.001][doi]].
  - Mailbox Abstractions for Static Analysis of Actor Programs. ECOOP 2017. [[http://soft.vub.ac.be/~qstieven/ecoop2017/ecoop2017actors-final.pdf][pdf]],
    [[https://doi.org/10.4230/LIPIcs.ECOOP.2017.25][doi]].
  - Employing Run-time Static Analysis to Improve Concolic
    Execution. BENEVOL 2017. [[http://ceur-ws.org/Vol-2047/BENEVOL_2017_paper_7.pdf][pdf]].
  - Incrementalizing Abstract Interpretation. BENEVOL 2017. [[http://ceur-ws.org/Vol-2047/BENEVOL_2017_paper_9.pdf][pdf]].
  - Static taint analysis of event-driven scheme programs. ELS 2017. [[http://soft.vub.ac.be/Publications/2017/vub-soft-tr-17-02.pdf][pdf]].
  - Improving trace-based JIT optimisation using whole-program
    information. VMIL@SPLASH 2016. [[http://soft.vub.ac.be/Publications/2016/vub-soft-tr-16-09.pdf][pdf]], [[http://doi.acm.org/10.1145/2998415.2998418][doi]].
  - STRAF: A Scala Framework for Experiments in Trace-Based JIT
    Compilation. GTTSE 2015. [[http://soft.vub.ac.be/Publications/2017/vub-soft-tr-17-09.pdf][pdf]], [[https://doi.org/10.1007/978-3-319-60074-1\_10][doi]].
